local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
-- Bogus Performance Evaluation: x1.000
local Window = OrionLib:MakeWindow({Name = "LocLe", HidePremium = false, SaveConfig = true, ConfigFolder = "Sigma"});

getgenv().Settings = {
    AutoFarm = false,
    WalkToEnemy = false,
    DamageBoost = false,
    GoldCollect = false,
    AutoAtk = false,
    AutoReborn = false,
    autoFuseSwords = false,
    autoSellWeapons = false,
    openEgg = false,
    autoSellHeroes = false,
    autoFuseHeroes = false,
    fuseLevel10Gems = false,
    deleteGems = false,
    AutoFuseAllGems = false,
    selectedTeleportMap = "",
    selectedMount = "",
    mespetsequiper = {}
}

local PlayerTab = Window:MakeTab({Name="Player",Icon="rbxassetid://4483345998",PremiumOnly=false});
local WhtvrTab = Window:MakeTab({Name="Mount/Eggs",Icon="rbxassetid://4483345998",PremiumOnly=false});
local SNGTab = Window:MakeTab({Name="Sword And Gems",Icon="rbxassetid://4483345998",PremiumOnly=false});
local AccesoryTab = Window:MakeTab({Name="Roll-Tab-Legendary",Icon="rbxassetid://4483345998",PremiumOnly=false});
local MiscTab = Window:MakeTab({Name="Misc",Icon="rbxassetid://4483345998",PremiumOnly=false});

local EMount = WhtvrTab:AddSection({Name="Mounts"});
local EGG = WhtvrTab:AddSection({Name="Eggs"});
local EGG1 = WhtvrTab:AddSection({Name="Lock Your Pets Before Using."});
local FarmSec = PlayerTab:AddSection({Name="Auto Farm"});
local FarmSec2 = PlayerTab:AddSection({Name="Others"});
local SwordSec = SNGTab:AddSection({Name="Fuse/Sell Swords"});
local Lvl10 = SNGTab:AddSection({Name="Auto Sell/Lvl 10 gem(Need Gems To Work)"});

AccesoryTab:AddLabel("Will Need The Tokens needed to roll")

local tms = AccesoryTab:AddSection({Name="Talismans"});
local Legendary = AccesoryTab:AddSection({Name="Legendary"});
local Mythic = AccesoryTab:AddSection({Name="Mythic"});
local Claim = MiscTab:AddSection({Name="Claim"});
local Others = MiscTab:AddSection({Name="Others"});
local Others1 = MiscTab:AddSection({Name="Others"});

local nameMap = {[100001]="Cloud",[100002]="Lightning Cloud",[100003]="Gold Cloud",[100004]="Magic Skateboard",[100005]="Sci-Fi Skateboard",[100006]="Pomni",[100007]="Doge Car",[100008]="Magic Carpet",[100009]="Tron Bike",[100010]="Fire Wheel",[100011]="Water Wheel",[100012]="Sleigh",[100013]="Banana Car",[100014]="Flying Swords",[100015]="Motor Bike",[100016]="Broken Sky",[100017]="Broom",[100018]="Rubber Ducky",[100019]="Bat Mobile",[100020]="Tank",[100021]="Superman",[100022]="UFO",[100023]="Rocket",[100024]="Pirate Ship",[100025]="Leaf",[100026]="Plane"};
local mountNames = {};
for _, name in pairs(nameMap) do
	table.insert(mountNames, name);
end
EMount:AddDropdown({Name="Select Mount",Options=mountNames,Callback=function(selectedMount)
	getgenv().Settings.selectedMount = selectedMount;
end});
EMount:AddButton({Name="Use Selected Mount",Callback=function()
	if getgenv().Settings.selectedMount then
		for id, name in pairs(nameMap) do
			if (name == getgenv().Settings.selectedMount) then
				local args = {[1]=id};
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EquipMount"):FireServer(unpack(args));
				break;
			end
		end
	else
		warn("No mount selected.");
	end
end});
local FuseGem1Tab = Window:MakeTab({
    Name = "Lvl 13 Dupe",
    Icon = "rbxassetid://4483345998", PremiumOnly = false
})

local FuseGem2Tab = Window:MakeTab({
    Name = "Lvl 10 Dupe",
    Icon = "rbxassetid://4483345998", PremiumOnly = false
})

-- Mã cho Tab Lvl 13
for level = 1, 12 do
    FuseGem1Tab:AddButton({
        Name = "Fuse Gem to level 13 w/ Lv." .. level,
        Callback = function()
            local function GetNextGemID(currentLevel)
                local player = game.Players.LocalPlayer
                local gui = player:WaitForChild("PlayerGui")
                local gemsPanel = gui:WaitForChild("GemsPanel")
                local frame = gemsPanel:WaitForChild("Frame")
                local bgImage = frame:WaitForChild("BgImage")
                local list = bgImage:WaitForChild("List")
                local scrollingFrame = list:WaitForChild("ScrollingFrame")

                if scrollingFrame then
                    for _, child in ipairs(scrollingFrame:GetChildren()) do
                        local numtext = child:FindFirstChild("NumText")
                        if numtext then
                            local level = tonumber(numtext.Text:match("%d+"))
                            if level == currentLevel then
                                return child.Name -- Return the ID of the gem
                            end
                        end
                    end
                else
                    error("Error: ScrollingFrame not found.")
                end

                return nil
            end

            local function FuseGems()
                local currentLevel = level

                -- Tạo vòng lặp để tự động tìm và fuse gem
                while currentLevel <= 12 do
                    local gemID = GetNextGemID(currentLevel)

                    if gemID then
                        print("Level", currentLevel, "gem ID found:", gemID)

                        -- Construct the args table with gemID repeated five times
                        local args = {
                            [1] = {
                                [1] = gemID,
                                [2] = gemID,
                                [3] = gemID,
                                [4] = gemID,
                                [5] = gemID
                            }
                        }

                        print("Invoking FuseGem remote with args:", args)
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseGem"):InvokeServer(unpack(args))

                        currentLevel = currentLevel + 1 -- Increment the level for the next iteration
                    else
                        print("Error: Could not find gem ID for level", currentLevel)
                        break -- Dừng nếu không tìm thấy gem
                    end

                    wait(0.5) -- Chờ một chút giữa các lần fuse để tránh quá tải
                end
            end

            FuseGems() -- Gọi hàm FuseGems để thực hiện
        end
    })
end

-- Mã cho Tab Lvl 10
for level = 1, 10 do
    FuseGem2Tab:AddButton({
        Name = "Fuse Gem to level 10 w/ Lv." .. level,
        Callback = function()
            local function GetNextGemID(currentLevel)
                local player = game.Players.LocalPlayer
                local gui = player:WaitForChild("PlayerGui")
                local gemsPanel = gui:WaitForChild("GemsPanel")
                local frame = gemsPanel:WaitForChild("Frame")
                local bgImage = frame:WaitForChild("BgImage")
                local list = bgImage:WaitForChild("List")
                local scrollingFrame = list:WaitForChild("ScrollingFrame")

                if scrollingFrame then
                    for _, child in ipairs(scrollingFrame:GetChildren()) do
                        local numtext = child:FindFirstChild("NumText")
                        if numtext then
                            local level = tonumber(numtext.Text:match("%d+"))
                            if level == currentLevel then
                                return child.Name -- Return the ID of the gem
                            end
                        end
                    end
                else
                    error("Error: ScrollingFrame not found.")
                end

                return nil
            end

            local function FuseGems()
                local currentLevel = level

                -- Tạo vòng lặp để tự động tìm và fuse gem
                while currentLevel <= 9 do
                    local gemID = GetNextGemID(currentLevel)

                    if gemID then
                        print("Level", currentLevel, "gem ID found:", gemID)

                        -- Construct the args table with gemID repeated five times
                        local args = {
                            [1] = {
                                [1] = gemID,
                                [2] = gemID,
                                [3] = gemID,
                                [4] = gemID,
                                [5] = gemID
                            }
                        }

                        print("Invoking FuseGem remote with args:", args)
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseGem"):InvokeServer(unpack(args))

                        currentLevel = currentLevel + 1 -- Increment the level for the next iteration
                    else
                        print("Error: Could not find gem ID for level", currentLevel)
                        break -- Dừng nếu không tìm thấy gem
                    end

                    wait(0.5) -- Chờ một chút giữa các lần fuse để tránh quá tải
                end
            end

            FuseGems() -- Gọi hàm FuseGems để thực hiện
        end
    })
end

FarmSec:AddToggle({Name="Auto Collect Drops",Callback=function(v1)
	if v1 then
		getgenv().Settings.GoldCollect = not getgenv().Settings.GoldCollect;
		if getgenv().Settings.GoldCollect then
			spawn(function()
				while wait() do
					for v8, v9 in pairs(game.Workspace.Golds:GetChildren()) do
						v9.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
					end
				end
			end);
		end
	end
end})

FarmSec2:AddToggle({Name="AutoGainPower",Default=getgenv().Settings.AutoAtk,Callback=function(Value)
	getgenv().Settings.AutoAtk = Value;
	if getgenv().Settings.AutoAtk then
		autoGainPowerLoop = game:GetService("RunService").Heartbeat:Connect(function()
			local remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes");
			if (remotes and remotes:FindFirstChild("PlayerClickAttack")) then
				remotes.PlayerClickAttack:FireServer();
			end
			wait(0.1);
		end);
	elseif autoGainPowerLoop then
		autoGainPowerLoop:Disconnect();
		autoGainPowerLoop = nil;
	end
end});

FarmSec2:AddToggle({Name = "Auto Rebirth",Default = getgenv().Settings.AutoReborn,Callback = function(Value)
            getgenv().Settings.AutoReborn = Value;
            if Value then
                while getgenv().Settings.AutoReborn do
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PlayerReborn"):FireServer()
                    wait(1)
                end
            end
        end,
    })

SwordSec:AddToggle({Name="Auto Fuse Swords",Callback=function(autoFuseSwords)
	if autoFuseSwords then
		getgenv().Settings.autoFuseSwords = true;
		while getgenv().Settings.autoFuseSwords do
			wait(1);
			pcall(function()
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FuseWeapon"):FireServer();
			end);
		end
	else
		getgenv().Settings.autoFuseSwords = false;
	end
end});


local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);

pcall(function()
    if WeaponsInventory.localPlayerData then
        for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
            if v.isEquip and v.isLock then
                table.insert(getgenv().Settings.mespetsequiper, v.guid);
            end
        end
    else
        print("localPlayerData is not loaded yet. Please try again later.")
    end
end);

SwordSec:AddToggle({
    Name="Auto Delete Weapons",
    Callback=function(autoSellWeapons)
        if autoSellWeapons then
            getgenv().Settings.autoSellWeapons = true;
            while getgenv().Settings.autoSellWeapons do
                wait(1);
                if WeaponsInventory.localPlayerData then
                    for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
                        if not v.isEquip and not v.isLock then
                            local args = {[1]={[1]=v.guid}};
                            game:GetService("ReplicatedStorage").Remotes.DeleteWeapons:FireServer(unpack(args));
                        end
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoSellWeapons = false;
        end
    end
});

SwordSec:AddToggle({Name="Auto Forge Equipped Sword",Callback=function(autoForgeSword)
	if autoForgeSword then
		getgenv().Settings.autoForgeSword = true;
		while getgenv().Settings.autoForgeSword do
			wait(1e-7);
			for _, v in pairs(WeaponsInventory.localPlayerData.weapons) do
				if v.isEquip then
					local args = {[1]=v.guid};
					game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ForgeWeapon"):InvokeServer(unpack(args));
				end
			end
		end
	else
		getgenv().Settings.autoForgeSword = false;
	end
end});

EGG:AddDropdown({
    Name = "Pick Egg",
    Default = "",
    Options = {"World 1","World 2","World 3","World 4","World 5","World 6","World 7","World 8","World 9","Naruto","One Piece"},
    Callback = function(Value)
        local EGGS = {
            ["World 1"] = 70001,
            ["World 2"] = 70003,
            ["World 3"] = 70005,
            ["World 4"] = 70007,
            ["World 5"] = 70009,
            ["World 6"] = 70011,
            ["World 7"] = 70013,
            ["World 8"] = 70015,
            ["World 9"] = 70017,
            ["Naruto"] = 70019,
            ["One Piece"] = 70021,
        }
        EGG.EggId = EGGS[Value]
    end
})

EGG:AddToggle({
    Name = "Open Eggs",
    Callback = function(Value)
        getgenv().Settings.openEgg = Value
        if Value then
            while getgenv().Settings.openEgg do
                local args = {
                    [1] = {
                        ["drawCardPlatformId"] = EGG.EggId,
                        ["count"] = 10
                    }
                }
                local success, errorMessage = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ExtractHero"):InvokeServer(unpack(args))
                end)
                if not success then
                    print("Error:", errorMessage)
                end
                wait(0.1) -- adjust the delay as needed
            end
        end
    end
})

local BurgerInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);

pcall(function()
    if BurgerInventory.localPlayerData then
        for _, v in pairs(BurgerInventory.localPlayerData.heros) do
            if v.isEquip and v.isLock then
                table.insert(getgenv().Settings.mespetsequiper, v.guid);
            end
        end
    else
        print("localPlayerData is not loaded yet. Please try again later.")
    end
end);

EGG1:AddLabel("Will Fuse to Equiped Heroes")
EGG1:AddLabel("Will Delete/Fuse The Uneqquiped and Unlocked Heroes")

EGG1:AddToggle({
    Name="Auto Delete Heroes",
    Callback=function(autoSellHeroes)
        if autoSellHeroes then
            getgenv().Settings.autoSellHeroes = true;
            while getgenv().Settings.autoSellHeroes do
                wait(1);
                if BurgerInventory.localPlayerData then
                    for _, v in pairs(BurgerInventory.localPlayerData.heros) do
                        if not v.isEquip and not v.isLock then
                            local x = {[1]={[1]=v.guid}};
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DeleteHero"):FireServer(unpack(x))
                        end
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoSellHeroes = false;
        end
    end
});

EGG1:AddToggle({
    Name="Auto Fuse Heroes",
    Callback=function(autoFuseHeroes)
        if autoFuseHeroes then
            getgenv().Settings.autoFuseHeroes = true;
            while getgenv().Settings.autoFuseHeroes do
                wait(1);
                if BurgerInventory.localPlayerData then
                    local equippedHeroGuid = nil;
                    local unequippedHeroGuids = {};
                    for _, v in pairs(BurgerInventory.localPlayerData.heros) do
                        if v.isEquip and v.isLock then
                            equippedHeroGuid = v.guid;
                        elseif not v.isEquip and not v.isLock then
                            table.insert(unequippedHeroGuids, v.guid);
                        end
                    end
                    if equippedHeroGuid and #unequippedHeroGuids > 0 then
                        local args = {
                            [1] = {
                                ["mainHeroGuid"] = equippedHeroGuid,
                                ["decomposeHeroGuids"] = unequippedHeroGuids
                            }
                        };
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HeroFuse"):FireServer(unpack(args));
                    end
                else
                    print("localPlayerData is not loaded yet. Please try again later.")
                end
            end
        else
            getgenv().Settings.autoFuseHeroes = false;
        end
    end
});

Lvl10:AddToggle({Name="Gemdupe",Callback=function(fuseLevel10Gems)
	if fuseLevel10Gems then
		getgenv().Settings.fuseLevel10Gems = true;
		pcall(function()
			local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
			for _, gem in pairs(WeaponsInventory.localPlayerData.gems) do
				pcall(function()
					if ((gem.equipPosition == nil) or (gem.equipPosition == "")) then
						local args = {[1]={[1]=gem.guid,[2]=gem.guid,[3]=gem.guid,[4]=gem.guid,[5]=gem.guid}};
						game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args));
						wait();
					end
				end);
			end
		end);
	else
		getgenv().Settings.fuseLevel10Gems = false;
	end
end});

Lvl10:AddToggle({Name="Delete Gems",Callback=function(deleteGems)
	if deleteGems then
		getgenv().Settings.deleteGems = true;
		pcall(function()
			local WeaponsInventory = require(game:GetService("ReplicatedStorage").Scripts.Client.Manager.PlayerManager);
			for _, gem in pairs(WeaponsInventory.localPlayerData.gems) do
				pcall(function()
					if ((gem.equipPosition == nil) or (gem.equipPosition == "")) then
						local args = {[1]={[1]=gem.guid}};
						game:GetService("ReplicatedStorage").Remotes.FuseGem:InvokeServer(unpack(args));
						wait();
					end
				end);
			end
		end);
	else
		getgenv().Settings.deleteGems = false;
	end
end});
	
function rerollLegendaryMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410004") or (tostring(rerollResult.ornamentId) == "410005")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410004") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410009") or (tostring(rerollResult.ornamentId) == "410010")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410009") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410014") or (tostring(rerollResult.ornamentId) == "410015")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410014") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollLegendaryTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if ((tostring(rerollResult.ornamentId) == "410019") or (tostring(rerollResult.ornamentId) == "410020")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410019") then
				rerollType = "Legendary";
			elseif (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicMask()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400001};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410001") and (tostring(rerollResult.ornamentId) ~= "410002") and (tostring(rerollResult.ornamentId) ~= "410003") and (tostring(rerollResult.ornamentId) ~= "410004") and (tostring(rerollResult.ornamentId) ~= "410005")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410005") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410005") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicAwakening()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400002};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410006") and (tostring(rerollResult.ornamentId) ~= "410007") and (tostring(rerollResult.ornamentId) ~= "410008") and (tostring(rerollResult.ornamentId) ~= "410009") and (tostring(rerollResult.ornamentId) ~= "410010")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410010") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410010") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicOrnament()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400003};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410011") and (tostring(rerollResult.ornamentId) ~= "410012") and (tostring(rerollResult.ornamentId) ~= "410013") and (tostring(rerollResult.ornamentId) ~= "410014") and (tostring(rerollResult.ornamentId) ~= "410015")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410015") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410015") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
function rerollMythicTrail()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400004};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410016") and (tostring(rerollResult.ornamentId) ~= "410017") and (tostring(rerollResult.ornamentId) ~= "410018") and (tostring(rerollResult.ornamentId) ~= "410019") and (tostring(rerollResult.ornamentId) ~= "410020")) then
			print("Unknown reroll found ! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		end
		if (tostring(rerollResult.ornamentId) == "410020") then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410020") then
				rerollType = "Rainbow";
			end
			print("!! REROLL FOUND !! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped !");
end
local function rerollTalismans()
	local rerollFound = false;
	repeat
		local rerollAttempt = {[1]=400005};
		local rerollResult = game:GetService("ReplicatedStorage").Remotes.RerollOrnament:InvokeServer(unpack(rerollAttempt));
		wait(0.1);
		if ((tostring(rerollResult.ornamentId) ~= "410021") and (tostring(rerollResult.ornamentId) ~= "410022") and (tostring(rerollResult.ornamentId) ~= "410023") and (tostring(rerollResult.ornamentId) ~= "410024") and (tostring(rerollResult.ornamentId) ~= "410025") and (tostring(rerollResult.ornamentId) ~= "410026") and (tostring(rerollResult.ornamentId) ~= "410027") and (tostring(rerollResult.ornamentId) ~= "410028")) then
			print("Unknown reroll found! : " .. tostring(rerollResult.ornamentId));
			rerollFound = true;
		elseif ((tostring(rerollResult.ornamentId) == "410025") or (tostring(rerollResult.ornamentId) == "410026") or (tostring(rerollResult.ornamentId) == "410027") or (tostring(rerollResult.ornamentId) == "410028")) then
			local rerollType = "None";
			if (tostring(rerollResult.ornamentId) == "410025") then
				rerollType = "As One Wishes";
			elseif (tostring(rerollResult.ornamentId) == "410026") then
				rerollType = "Magic Tome";
			elseif (tostring(rerollResult.ornamentId) == "410027") then
				rerollType = "Imperial Jade Seal";
			elseif (tostring(rerollResult.ornamentId) == "410028") then
				rerollType = "Quinta";
			end
			print("!! REROLL FOUND!! : " .. rerollType);
			rerollFound = true;
		end
	until rerollFound 
	print("Script stopped!");
end
tms:AddButton({Name="Reroll Talismans",Callback=rerollTalismans});
Legendary:AddButton({Name="Reroll Mask",Callback=rerollLegendaryMask});
Legendary:AddButton({Name="Reroll Awakening",Callback=rerollLegendaryAwakening});
Legendary:AddButton({Name="Reroll Ornament",Callback=rerollLegendaryOrnament});
Legendary:AddButton({Name="Reroll Trail",Callback=rerollLegendaryTrail});
Mythic:AddButton({Name="Reroll Mask",Callback=rerollMythicMask});
Mythic:AddButton({Name="Reroll Awakening",Callback=rerollMythicAwakening});
Mythic:AddButton({Name="Reroll Ornament",Callback=rerollMythicOrnament});
Mythic:AddButton({Name="Reroll Trail",Callback=rerollMythicTrail});


Claim:AddButton({Name="Group Rewards",Callback=function()
	while wait() do
		game:GetService("ReplicatedStorage").Remotes.ClaimGroupReward:InvokeServer();
	end
end});

Claim:AddButton({Name="Daily Gifts",Callback=function()
	while wait() do
		for x = 1, 7 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage").Remotes.ClaimSevenLoginReward:FireServer(unpack(args));
		end
	end
end});

Claim:AddButton({Name="Redeem Codes",Callback=function()
	while wait() do
		for x = 1, 1000 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("GiftCodeReceived"):InvokeServer(unpack(args));
		end
	end
end});

Claim:AddButton({Name="Redeem Spins",Callback=function()
	while wait() do
		for x = 1, 8 do
			local args = {[1]=x};
			game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ClaimActivitySpinTicket"):InvokeServer(unpack(args));
		end
	end
end});

Others1:AddButton({Name="SimpleSpy",Callback=function()
	loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpyBeta.lua"))();
end});

spawn(function()
	while wait(15) do
		local VirtualUser = game:service("VirtualUser");
		VirtualUser:CaptureController();
		VirtualUser:ClickButton2(Vector2.new());
	end
end);

Others:AddButton({Name="Fps Booster",Callback=function()
	for a, b in pairs(game.ReplicatedStorage.SkillEffects:GetDescendants()) do
		if (b:IsA("Part") or b:IsA("MeshPart")) then
			b.Transparency = 1;
		end
		if (b:IsA("ParticleEmitter") or b:IsA("Beam")) then
			b.Enabled = false;
		end
	end
	game.ReplicatedStorage.Effect.AttackNum.Enabled = false;
	local c = game;
	local d = c.Workspace;
	local e = c.Lighting;
	local f = d.Terrain;
	f.WaterWaveSize = 0;
	f.WaterWaveSpeed = 0;
	f.WaterReflectance = 0;
	f.WaterTransparency = 0;
	e.GlobalShadows = false;
	e.FogEnd = 8999999488;
	e.Brightness = 0;
	settings().Rendering.QualityLevel = "Level01";
	for g, h in pairs(c:GetDescendants()) do
		if (h:IsA("Part") or h:IsA("Union") or h:IsA("CornerWedgePart") or h:IsA("TrussPart")) then
			h.Reflectance = 0;
		elseif (h:IsA("Decal") or h:IsA("Texture")) then
			h.Transparency = 0;
		elseif (h:IsA("ParticleEmitter") or h:IsA("Trail")) then
			h.Lifetime = NumberRange.new(0);
		elseif h:IsA("Explosion") then
			h.BlastPressure = 0;
			h.BlastRadius = 0;
		elseif (h:IsA("Fire") or h:IsA("SpotLight") or h:IsA("Smoke") or h:IsA("Sparkles")) then
			h.Enabled = false;
		elseif h:IsA("MeshPart") then
			h.Reflectance = 0;
		end
	end
	for g, i in pairs(e:GetChildren()) do
		if (i:IsA("BlurEffect") or i:IsA("SunRaysEffect") or i:IsA("ColorCorrectionEffect") or i:IsA("BloomEffect") or i:IsA("DepthOfFieldEffect")) then
			i.Enabled = false;
		end
	end
	sethiddenproperty(game.Lighting, "Technology", "Compatibility");
end});
